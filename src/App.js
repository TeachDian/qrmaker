// src/App.js
import React, { useState, useEffect, useRef } from 'react';
import { QRCodeCanvas } from 'qrcode.react';
import './App.css';

// Helper function to format the date and time
const formatDateTime = (date) => {
  if (!date) return '';
  // Use 24-hour format for less ambiguity if needed, or keep locale default
  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
};

// Helper function to sanitize text for use in filenames
const sanitizeFilename = (text) => {
  if (!text) return 'qrcode';
  // Replace invalid characters with underscore, trim whitespace, handle empty result
  const sanitized = text.replace(/[<>:"/\\|?*\s\.]+/g, '_').trim();
  return sanitized.length > 0 ? sanitized.substring(0, 50) : 'qrcode'; // Limit length
};

function App() {
  const [inputText, setInputText] = useState('');
  const [qrCodeText, setQrCodeText] = useState('');
  const [generationTimestamp, setGenerationTimestamp] = useState(null);

  // --- Configuration for Download ---
  const qrCodeSizeForDisplay = 256; // Size for screen display
  const targetDPI = 400;
  const physicalSizeInches = 1.0; // Desired physical size of QR code part
  // Calculate pixel size needed for the QR code part at target DPI
  const qrCodeSizeForDownload = Math.round(physicalSizeInches * targetDPI);
  const padding = Math.round(0.1 * qrCodeSizeForDownload); // Padding around QR code
  const labelFontSize = Math.round(0.08 * qrCodeSizeForDownload); // Font size relative to QR size
  const timestampFontSize = Math.round(0.06 * qrCodeSizeForDownload);
  const spaceBetweenQrAndText = Math.round(0.1 * qrCodeSizeForDownload);
  const spaceBetweenLines = Math.round(0.05 * qrCodeSizeForDownload);

  // Calculate total canvas height needed for download
  const textHeight = labelFontSize + timestampFontSize + spaceBetweenLines;
  const totalDownloadCanvasHeight = qrCodeSizeForDownload + spaceBetweenQrAndText + textHeight + (padding * 2);
  const totalDownloadCanvasWidth = qrCodeSizeForDownload + (padding * 2);
  // --- End Configuration ---

  // Ref to access the QR canvas generated by the library (for copying)
  const qrCanvasRef = useRef(null);

  // Update QR code text and timestamp
  const handleInputChange = (event) => {
    const text = event.target.value;
    setInputText(text);
    setQrCodeText(text);
  };

  useEffect(() => {
    if (qrCodeText) {
      setGenerationTimestamp(new Date());
    } else {
      setGenerationTimestamp(null);
    }
  }, [qrCodeText]);

  // Function to handle saving the enhanced QR code
  const handleSave = () => {
    const originalCanvas = qrCanvasRef.current?.querySelector('canvas'); // Get the library's canvas

    if (!originalCanvas || !qrCodeText) {
      console.error('QR Code canvas not found or no text to save.');
      alert('Cannot save QR code. Ensure text is entered.');
      return;
    }

    // Create a new canvas for the final image
    const finalCanvas = document.createElement('canvas');
    finalCanvas.width = totalDownloadCanvasWidth;
    finalCanvas.height = totalDownloadCanvasHeight;
    const ctx = finalCanvas.getContext('2d');

    if (!ctx) {
      console.error('Could not get 2D context for final canvas.');
      alert('Error preparing image for download.');
      return;
    }

    // 1. Fill background with white
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, finalCanvas.width, finalCanvas.height);

    // 2. Draw the high-resolution QR code (scaling from display version)
    // We draw the *original display canvas* scaled up onto the new canvas.
    // The library internally renders at the requested `size`, we just copy it larger.
    // Alternatively, render a hidden high-res QRCodeCanvas - but this copy method is simpler.
    const qrSourceSize = originalCanvas.width; // Size of the canvas generated by qrcode.react
    ctx.drawImage(
      originalCanvas,
      padding, // x position on final canvas
      padding, // y position on final canvas
      qrCodeSizeForDownload, // width on final canvas (scaled size)
      qrCodeSizeForDownload // height on final canvas (scaled size)
    );

    // 3. Prepare text drawing
    ctx.fillStyle = '#000000'; // Black text
    ctx.textAlign = 'center';  // Center text horizontally

    // 4. Draw the Label (Encoded Text)
    ctx.font = `bold ${labelFontSize}px sans-serif`;
    const labelY = padding + qrCodeSizeForDownload + spaceBetweenQrAndText + (labelFontSize / 2); // Adjust Y for baseline
    ctx.fillText(
      qrCodeText,
      finalCanvas.width / 2, // Center X
      labelY,
      finalCanvas.width - (padding * 2) // Max width to prevent overflow
    );


    // 5. Draw the Timestamp
    ctx.font = `${timestampFontSize}px sans-serif`;
    const timestampY = labelY + labelFontSize / 2 + spaceBetweenLines + (timestampFontSize / 2); // Below label
    const timestampText = generationTimestamp ? formatDateTime(generationTimestamp) : '';
    ctx.fillText(
      timestampText,
      finalCanvas.width / 2, // Center X
      timestampY,
      finalCanvas.width - (padding * 2) // Max width
    );

    // 6. Trigger Download
    const pngUrl = finalCanvas
      .toDataURL('image/png')
      .replace('image/png', 'image/octet-stream');
    let downloadLink = document.createElement('a');
    downloadLink.href = pngUrl;
    downloadLink.download = `${sanitizeFilename(qrCodeText)}.png`; // Use sanitized input text as filename
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>React QR Code Generator</h1>
      </header>

      <main className="App-main">
        <div className="input-section">
          <label htmlFor="text-input">Enter text or URL:</label>
          <input
            type="text"
            id="text-input"
            value={inputText}
            onChange={handleInputChange}
            placeholder="philip pogi"
            autoComplete="off"
          />
        </div>

        {/* QR Code Display Area */}
        {qrCodeText && (
          <div className="output-section">
            <h2>Your QR Code:</h2>
            {/* Use a ref to access the canvas generated here */}
            <div ref={qrCanvasRef} className="qr-code-display">
              <QRCodeCanvas
                value={qrCodeText}
                size={qrCodeSizeForDisplay} // Use display size here
                level={'H'}
                includeMargin={true} // Library margin for display
                bgColor={'#ffffff'}
                fgColor={'#000000'}
              // No id needed if using ref
              />
            </div>
            <p className="qr-label-display">
              <strong>Encoded:</strong> {qrCodeText}
            </p>
            {generationTimestamp && (
              <p className="qr-timestamp-display">
                Generated: {formatDateTime(generationTimestamp)}
              </p>
            )}
            <button onClick={handleSave} className="save-button">
              Save QR Code (PNG @ {targetDPI} DPI)
            </button>
          </div>
        )}

        {!qrCodeText && (
          <p className="prompt">Enter some text above to generate a QR code.</p>
        )}
      </main>

      <footer className="App-footer">
        <p>
          <a
            href="https://sabinex.vercel.app"
            target="_blank" // Opens the link in a new tab
            rel="noopener noreferrer" // Security best practice for target="_blank"
            className="footer-link" // Optional: Add a class for styling
          >
            Dev
          </a>
        </p>
        <p className="footer-copyright"> {/* Optional: Add a class for styling */}
          Sabinex Â© {new Date().getFullYear()} {/* Gets current year */}
        </p>
      </footer>
    </div>
  );
}

export default App;